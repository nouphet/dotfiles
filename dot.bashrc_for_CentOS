# .bashrc

# for bash_completion
if [ -f /etc/bash_completion ]; then
  source /etc/bash_completion
fi

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# User specific aliases and functions

# プロンプトにブランチ名表示
function parse_git_branch {
  RED="\e[0;31m"
  YELLOW="\e[33m"
  GREEN="\e[0;32m"
  BLUE="\e[0;34m"
  NONE="\e[0m"
 
  NOW_BRANCH=$(git symbolic-ref HEAD 2> /dev/null | cut -d/ -f3)
  IND_STAT=$(git status --porcelain 2> /dev/null | grep -v "?" | cut -d" " -f1 )
  WTR_STAT=$(git status --porcelain 2> /dev/null | grep -v "?" | cut -d" " -f2 )
 
  if [ "${IND_STAT}" != "" ]; then
    [[ ${NOW_BRANCH} ]] && echo -e "${RED}[${NOW_BRANCH}]${NONE}"
 
  elif [ "${WTR_STAT}" != "" ]; then
    [[ ${NOW_BRANCH} ]] && echo -e "${YELLOW}[${NOW_BRANCH}]${NONE}"
 
  else
    [[ ${NOW_BRANCH} ]] && echo -e "${BLUE}[${NOW_BRANCH}]${NONE}"
 
  fi
 
}
#export PS1='\u@\h \w $(parse_git_branch)$ '

# modidy console
if [ $TERM = screen  ]; then
  PS1="\`if [ \$? = 0 ]; then echo \[\e[33m\]\u@$HOSTNAME:\w\[\e[0m\]; else echo \[\e[41m\]\u@$HOSTNAME:\w\[\e[0m\]; fi\`$(parse_git_branch)(screen $STY)\n\\$ "
else
  PS1="\`if [ \$? = 0 ]; then echo \[\e[33m\]\u@$HOSTNAME:\w\[\e[0m\]; else echo \[\e[41m\]\u@$HOSTNAME:\w\[\e[0m\]; fi\`$(parse_git_branch)\\n\\$ "
fi

# for shortcut
alias up='cd ..'
alias up2='cd ../..'
alias up3='cd ../../..'
alias up4='cd ../../../..'
alias up5='cd ../../../../..'
#alias ls='ls -G'
alias rm='rm -i'
alias l='ls -a'
alias la='ls -al'
alias ll='ls -l'
alias lll='ls -l'
alias t='tar zxvf'
alias t-='tar xvf -'
alias b='bzip2 -dc'
alias dh='df -h'
alias vi='vim'
alias v='vim'
alias ifc='/sbin/ifconfig |grep inet'
#alias ping='ping -i 0.2'
alias gowww='cd /var/www/html/'
alias goshare='cd /var/share/'
alias getadelie='wget https://raw.github.com/suin/xoops-adelie-debug/master/build/AdelieDebug.class.php'

function go {
	local dir
	dir=$(go-get-path $@)
	result=$?
	[[ $dir ]] && cd $dir
	return $result
}

_go()
{
	local cur prev split=false
	COMPREPLY=()
	_get_comp_words_by_ref -n : cur prev
	COMPREPLY=($(compgen -W "$(go-get-path names)" -- "$cur"))
}
complete -F _go go

